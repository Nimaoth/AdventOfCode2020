use import std.string
use import std.array
io :: import std.io
fmt :: import std.fmt

Main :: () {
    part_1()
    part_2()
}

part_1 :: () {
    apply_operators :: (value_stack: &mut Array[int], op_stack: &mut Array[char], op: char) {
        while op_stack.count() > 0 {
            match op_stack.peek_last() {
                '(' -> {
                    if op == ')' then op_stack.pop()
                    return
                }
                '*' -> {
                    op_stack.pop()
                    b, a := value_stack.pop(), value_stack.pop()
                    value_stack.push(a * b)
                }
                '+' -> {
                    op_stack.pop()
                    b, a := value_stack.pop(), value_stack.pop()
                    value_stack.push(a + b)
                }
                _ -> {
                    @assert(false)
                }
            }
        }
    }

    mut result := 0
    mut value_stack := Array[int].new()
    mut op_stack := Array[char].new()
    for line in input.lines() {
        value_stack.clear()
        op_stack.clear()

        mut expr := line
        mut tok := ""

        loop {
            tok, expr = next_token(expr)
            if tok.bytes.length == 0 then break

            match char(*tok[0]) {
                '(' -> op_stack.push('(')
                ')' -> {
                    apply_operators(&mut value_stack, &mut op_stack, ')')

                }
                '*' -> {
                    apply_operators(&mut value_stack, &mut op_stack, '*')
                    op_stack.push('*')

                }
                '+' -> {
                    apply_operators(&mut value_stack, &mut op_stack, '+')
                    op_stack.push('+')
                }

                _ -> {
                    num := fmt.parse_int(tok)
                    value_stack.push(num)
                }
            }
        }
        apply_operators(&mut value_stack, &mut op_stack, ' ')
        @assert(value_stack.count() == 1)
        result += *value_stack[0]
    }

    io.formatln("Part 1: {}", [result])
}

part_2 :: () {
    apply_operators :: (value_stack: &mut Array[int], op_stack: &mut Array[char], op: char) {
        while op_stack.count() > 0 {
            match op_stack.peek_last() {
                '(' -> {
                    if op == ')' then op_stack.pop()
                    return
                }
                '*' -> {
                    if op == '+' {
                        return
                    }
                    op_stack.pop()
                    b, a := value_stack.pop(), value_stack.pop()
                    value_stack.push(a * b)
                }
                '+' -> {
                    op_stack.pop()
                    b, a := value_stack.pop(), value_stack.pop()
                    value_stack.push(a + b)
                }
                _ -> {
                    @assert(false)
                }
            }
        }
    }

    mut result := 0
    mut value_stack := Array[int].new()
    mut op_stack := Array[char].new()
    for line in input.lines() {
        value_stack.clear()
        op_stack.clear()

        mut expr := line
        mut tok := ""

        loop {
            tok, expr = next_token(expr)
            if tok.bytes.length == 0 then break

            match char(*tok[0]) {
                '(' -> op_stack.push('(')
                ')' -> {
                    apply_operators(&mut value_stack, &mut op_stack, ')')

                }
                '*' -> {
                    apply_operators(&mut value_stack, &mut op_stack, '*')
                    op_stack.push('*')

                }
                '+' -> {
                    apply_operators(&mut value_stack, &mut op_stack, '+')
                    op_stack.push('+')
                }

                _ -> {
                    num := fmt.parse_int(tok)
                    value_stack.push(num)
                }
            }
        }
        apply_operators(&mut value_stack, &mut op_stack, ' ')
        @assert(value_stack.count() == 1)
        result += *value_stack[0]
    }

    io.formatln("Part 2: {}", [result])
}

next_token :: (input: string) -> (token: string, rem: string) {
    if input.bytes.length == 0 {
        return "", ""
    }

    return match char(*input[0]) {
        '(' -> input[..1], input[1..]
        ')' -> input[..1], input[1..]
        '+' -> input[..1], input[1..]
        '*' -> input[..1], input[1..]
        ' ' -> next_token(input[1..])
        $ch if ch.is_digit() -> {
            for input {
                if !it.is_digit() {
                    return input[..it_index], input[it_index..]
                }
            }
            return input, ""
        }
        _ -> @assert(false)
    }
}


input := puzzle_input

test_input1 := "1 + 2 * 3 + 4 * 5 + 6"                           // 71
test_input2 := "1 + (2 * 3) + (4 * (5 + 6))"                     // 51
test_input3 := "2 * 3 + (4 * 5)"                                 // 26
test_input4 := "5 + (8 * 3 + 9 + 3 * 4 * 3)"                     // 437
test_input5 := "5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))"       // 12240
test_input6 := "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2" // 13632

puzzle_input := "6 * 8 * (2 * 9) + 2 * 8 * 4
(2 + 2 * 4 * (8 * 9 * 2 + 6) * 4) * 2
2 * (7 + 3 * 5 * 7 * 6) + 9 * 4
((8 * 4 * 7 + 9 + 8) * (6 * 4) + 7 * 9 * 8 + 3) * (9 + 6 + 8 + 2 + (6 * 4 * 6) * (9 + 7 * 6 * 5 + 5 * 3)) * 8 * 8
3 + 8 * (4 * 8 * (9 + 3 + 9 * 5 + 6 * 7)) * 6 + 6 * (4 + 6 * 9 + 9 * (4 * 8) + 2)
7 * 8 * 3 + (8 + 9 + 3 * 3 * 4 * 5) * 5
(2 * 2 + 2 * 8 + 7 * 5) + 2 + 5 + 2
2 + ((3 * 7 + 8 * 9) * 6 * 5 + (6 * 3 * 3 + 6 + 6 + 4) * (7 * 3 + 7 * 7 * 9)) * (2 * 2) + 6
9 * 5 + 5 + 9 + 3
(9 * 3 * (9 + 4 * 4 + 6) + 7) + ((2 * 9 + 8 + 5) * 3 * 3) + 8
(6 * 8) * 5 + (7 + 2 * 9) * 9 * 4
2 * 3 + ((6 + 8 + 8) + 5 + 8)
4 * (6 * 4 * 5 + (9 * 3 + 4 + 2) * 2)
(7 * 4 + (6 * 8 + 9 + 4 * 9 * 5) + 3 * 6 + (2 + 8 * 9 * 4 * 6)) + 7 + 9 * (6 + (5 + 8 + 9 * 6 + 5) * 9 * 7 + 2) + 4
((3 + 2) + 7 + (6 + 3 * 7) + 7 * (5 * 6 * 9 * 4) * 5) + (2 * (9 + 8 * 4 * 7) * 7 * 6) * 7
((6 + 6) * 2) * 9 + 3 + 5
((2 * 4 + 8) + 9 * 8 * 7 * 2) + (6 * 5 + 4 + (4 + 3 + 5)) + 6 * 6 * 5 * ((9 * 4 * 7) * 6 + 8 * (6 * 2))
7 + 8 + 6
6 + (4 * 2 * 6 + (7 + 7 + 3 * 3 + 9) * 6) * 5 + (7 * 7) + 2
8 + 2 + (3 + 9 * 4 * 4 + 3 + 5) + 3 + (6 + 4 + 3 * 9 * 2) + 7
(5 * 5) + (6 + 4 + 8 * 3 * 6 + 7) * 5
(3 * (4 + 7 + 9 * 8 + 7) * 8) + 3
3 * (3 + 6)
8 * 4 * 8 + (2 * 3 + 8 * (4 + 2) + 2 * 7)
8 + (4 * 6 * 6 + 7 * (7 * 5 + 2))
(4 + 2 * 9 * 7 * (2 * 8)) + 8 * 8 * 6 + 4
9 + 3 * 9 + 7
(7 + (5 * 5 * 2 + 4 + 7 * 2) * 3 * (5 + 4 * 7 + 2)) + 5 * (7 + 9) + 2 + 9 + 3
(4 * (7 + 3 * 6 * 3 * 5)) + 5 * ((5 * 4 * 2) + 9 * 3 + 6) + 7 + (5 * 6 * 6 * 3 * 7)
3 * (8 * (6 * 8 + 8 + 5))
6 * (7 + (2 + 2 * 5 * 3) * 3) + (2 * 9 * 4 * 4)
2 * 7 + ((4 * 5 + 3) + 2) + (3 + 5 * 2) + 8
((2 + 6 * 4 * 3) * 6 * 5 * 6 + 8 * 5) + 5 * 8
4 * (6 + 9) + 6 + 8 * 5
(3 * (2 + 8) + (6 * 3 * 8) + (5 * 3 * 6 + 9 + 8 + 8)) + 7
5 * 4 + ((6 + 3) + 6) + 3 * (2 + (4 + 9 * 9 * 5) * (4 * 3) + 7 + 3) + 3
(3 + 5) * 9 * 4
6 * (4 + (2 * 7 * 8 * 5 * 6) + 6 * 7 * 2 + 6) + 7
4 * 7 * (6 + 2 * 4 * 6) + 5 + 6 * ((5 * 9 + 3) + 7)
2 * 2 + 5 * 8 + ((9 + 2 + 4) * 4 + 2 * 6 + 5) + 3
(5 * 4 + 2) * 2 * (7 * (7 * 6 + 9 * 8) * (5 * 7 * 9))
(2 * 2) + 8 * 9 * 6 + (4 + (8 + 8 * 4 + 5 * 3) + (9 + 5) * 2 + (4 + 8 * 4 * 9 + 8)) + 2
4 + (5 + 3 + 4 + (7 * 6 + 5 * 4 + 5) * 9) * 3 + 8 + 3
9 * 3 * 3 + (6 + (6 + 9 + 7 * 5 + 9) * 9) * 3 * (6 * 5 * 6 + 2)
(7 * 3 + 5 + 8) * 3 * (7 * 6 + 4 + (6 * 5 + 4 * 2 + 5)) * 4
3 + 5 + (7 + 7 * 8 + 7 + (5 * 9 * 9 + 4 * 5) + 6) + 2 * 9 + 2
3 * (6 + 6 + 5 * 5 * 5) * 4 * (3 + 5 + 5 * 5) * 6 + (8 + 6 + (5 * 2 + 9) + 6 * (5 * 4 + 7))
3 + 9 * (5 + 7 * 8 * 5 * 8 * 2) * 9
3 + 5 + 3 * 2 * (5 * 5) + 4
6 + (4 * (9 * 9 * 4 * 4) * (2 * 6 * 9 + 8) + 5 + 2 * (6 + 8 * 6 + 3 * 9)) + 9
(6 + (6 * 3 + 9 + 2 * 5) * 6 + 4 * 5 * 4) * 5 * 5 * 9 + 6 + 5
(6 + 2 + 8 * (7 + 8 * 5 * 8 + 2) + (5 + 5 + 3 * 4 * 6) + 8) * 8 * 9 * 8
8 + ((7 + 5 * 5 + 8 * 4) * 6 + 3 * 7 + 4 * 6) * 8
6 * 7 * 7 + ((6 + 6 + 8) + 3 + 3) * 4 * 4
9 * 3 * ((3 * 9 * 2 + 2 * 2) * 8) + 4
(9 + 9 + 3) * 8 + 5 * 9 + ((3 + 4 + 6 + 7 + 2) * 7 + 8 * 3 + 3 + (2 * 8 + 5 + 3 + 3 + 8)) * (2 * 7)
(2 + 8 + (9 * 6 * 9 + 3) + 2 * 4) + 4 * 7 * 8 + 4
8 + 3 + (8 * 3 + 7) * 6
(3 * 5 * 2 * 8 * (5 + 4 * 6 + 8)) * 6 * (3 + 9 + 4 + 4) * (7 + 6 * 6)
9 + (4 + 5 + (6 * 2 + 4)) * (6 + 5 + 9)
5 * 3 * (9 * (8 * 4 * 5 + 8) + 4 + 5 + (6 + 5 + 5 + 3 + 8 + 3))
6 * (2 * 5 * 9 * 2) + (8 * 6 + 7)
7 + 6 + 9 + (8 + 5 + 8 * 2 * 9) * 6
4 + (3 * (7 + 9 + 5 + 2 + 7)) * (8 * 3) * 9 + 5 + (5 + 6 * 7 + 9)
5 * 5 * 4 + ((4 * 5 * 8 + 4 + 5 + 8) * 7 + (6 + 7) + 6 * 4 + 2) + (3 * 4 * 2 + 3 + 2 + 6) + 2
(4 * 2 + (6 * 9 + 7) + 3) * 5
5 * ((8 * 8) + 6 + 8 * 6) * ((6 + 5 * 5 + 6 + 3 * 8) * 9 + 3 + (7 + 7 + 5 * 2))
((5 * 8) + 7 + (4 + 3 + 6 * 3) + (9 * 9 * 9 + 2 * 6) + 5) + (7 + 5 + 7 * (5 + 5 + 7) + 9 * 2) * 3 + 9
7 * 9 + 3
2 * (7 + 8 * 3) + 3 + 4 * (7 * (5 * 2 + 8 + 5) + 9 + 2)
(9 + 5 * (9 + 5 * 7 + 6)) + 9 + 7 + 4 * (6 + 9 + 9 + 3)
7 + (9 * 8 + (9 + 2 + 8 + 3 + 4) + 4 * 4 * 9) + 7 + (7 * 8 + 3 + 9)
5 * ((8 * 8 * 4 + 4) * 4 * (6 * 9 + 8 + 7 * 2 + 7) * 6 + 2) + 7
6 * 7 + 3 * (5 + 7 * 3 * 7) * (8 + (5 * 8 + 5 * 3))
7 + 8 * (7 * 2 * 3 + 5 + 3 * (9 + 8 * 2 * 3 * 8)) + 8 + 3 + 4
2 * (4 * (3 * 4 + 5 + 4 * 4) * 4 + 2 * 2 * 3)
(7 * 2 + 3 + 3 + (8 * 3 * 8 * 6 * 9 * 8)) + 7 * 9 * 7 + 9
6 + 3 * (9 + 2 + 9) + (5 + 8 * 8)
3 + 8 + (7 * 9 + 4 + 5) + 6
(4 + 3 * (5 * 7 * 6 + 5 * 8)) * 8 + 3 + 5 + 3
8 + ((9 * 4 + 5) + 4) * 2 * 2 * 3 + 4
(5 * 8) + 3
4 + (4 + (2 + 3 + 2 * 8 * 4 * 4) * 7 * 5 * 5 + 3) * 9
(9 + 6 + 3 * 7 + 6 + 9) * 9 + (4 + 8 * (6 + 3 * 6 * 5) + 3 + 5 + (8 * 8 * 8 * 6)) + 5
4 * (9 + 8 * 4 * (6 + 8 * 4 + 7) + 5) * 4 * (4 * 8 + 7) + 4 + 3
5 * 5 + 3 * 3 * (2 * 5 * (2 + 8 + 7) + (2 + 8) + 6)
(9 + 6 * 8 + (4 * 7 + 8 + 5 + 2) + 3 * 2) + 3 * (2 * (6 + 7 + 3 + 4 + 6) + 8 + 5 * 2) * (8 * (4 * 7 + 5 * 7) + 4) + 5
9 + (2 * (5 * 7) * (5 * 7 * 7) * 7 * 4) + 7 * (5 * 9 + (9 * 7 * 7 * 2))
5 * 8 + 4 + (4 * 4) + 7 * 7
6 + (3 + (2 + 6) + 3) + 2
(3 + 9 * (7 + 4 * 8 * 8) + (4 + 9) * 9 * 2) + 9
6 * 4 * ((4 + 3 * 5 * 4) * 3 + (5 + 7 + 6 + 8 * 6) + (2 + 3 + 2 + 3 * 3) * (6 * 8 * 2)) * (3 * (9 * 8 * 4 + 4 * 3 + 3) + (4 + 8 + 9))
3 * 2 * (8 * (8 + 6) * 6) + (7 + 2 + 6 * 3 + 4 * 4) + (7 + 4 + 2 + 8 * 9) + 2
(2 + 7 + (6 + 3) + 4 + 3) + (3 * 8 + 5 + 7 * 6) * 2 * 6 * 8 + (4 + (9 + 5 + 4 + 5 + 2 * 5) + 3)
(9 * 2 * 5) + 8 * 7 + (8 * 8 * (5 * 8 * 3 * 6) + 7)
7 * 3 * 8
6 + (6 * 7) + 9 + 9 + (6 * 5 + 3 * (8 * 2 * 4) + 9)
6 + 3 * 6 + ((9 + 4) * (6 + 7 * 2)) * 3
6 + 3 + (4 + 5 * 4 + 8) + 5 + 9 + 5
(5 * 2 + 3 * 2 + 3) * 6 * 4 * 7 + 2 * 2
4 * 7 * ((5 * 9 + 8 * 6) + 6 + 3 * (4 * 9) * 4)
(8 * 4) + 5 + 5 + (6 + 4 * (5 * 7 * 5 + 4 * 9 + 9) + (2 * 3 * 7 + 8 + 2) + (7 * 4 * 8)) + 2 * 3
7 * 6 + 7 + (2 * 6 * 2 * 5 * 8)
7 * 2 + ((7 + 9 * 3) + 4 + 2) * 6 * 7 * ((8 + 8) + 7)
4 + (9 * 2 + 2 * (9 * 3 + 3 + 3 * 7) + 8 + 7) + 5
8 * 8 * 9 * 8 * (2 * 6 + (9 + 4 + 5) * (9 * 4 + 9 * 7 + 2) + 2) * (2 * 6 + 3 * 6 + 3 + (4 + 5 * 6 * 3))
4 * 9 * 3 + 2 + (8 + 5 * 8 * 5 * (4 * 8 * 8 * 8) + (5 + 6)) * 2
9 * 2 * 8 * 5 * 2 + 7
7 + 8 * (9 * 9 * 3 + (5 * 6 * 9 * 4 * 8) + 3 * 6) + ((7 * 2 * 5 * 3) * 3 + (2 * 5 + 9 + 8 * 4) * 6 + 9 + 5) + 3
3 + (3 + 8 * 3 + 3 * 6 + (2 + 8)) * 2 * (9 * (3 + 2) + (3 + 9 + 7) * 7 + (9 + 3 * 7 + 2)) * ((8 * 2) * 3 * 8 + 3)
2 * (7 * 7 * 8 * 6 + 6) * 6 + 2 * 9 * (3 * 8 * 9)
(6 * 3 * 5 + (4 * 3 * 8 * 9 * 6 + 4) * 6) * 8 + 6
6 + 6 * 5 * 7 + 3
2 * 2 + 8 + 8 + (8 + 9 + (5 + 7 + 4 * 6) + 8 + 2) * 7
6 * (7 + (2 * 2 * 8 * 8 * 9 + 6) + 3 * 3) * 3 * 5 + 4 + 9
4 + (7 * 6 * 4 + (9 + 8 * 8 + 6) * (8 + 3 * 7 * 3 + 6 * 4) + (9 + 6 * 2)) * (9 + 8 * 6) * 8 * 4
(3 * (9 + 6 * 9 * 2) + 9 + 5 + 7 + 9) * 3 * 2 * 6 * 4 * 6
(8 * 9 + 9 + 8) * 6 * (6 + 2 * 4 + (9 + 4 + 2 + 9) * (9 + 7)) + 3 * 5 * 3
9 * 6
2 + 3 + ((4 + 3 + 5 * 2 * 3) * 5 * 5 + 5 + 8) * 7 + (5 * 2)
2 * (5 + 6 * 7) + 6 * 5 + 5 * (7 + 6)
7 + 9 + 8 + 9 * ((4 + 5 * 5 + 3) * 5 * 9 + (6 + 7 + 4) + 5) * (7 + 2 + 5)
7 * ((2 + 6) * (3 + 8 + 3 + 8 * 4 + 9) * 9 + 3 + 5 + 7)
2 + 3 * 5 + (3 + (2 + 2 * 6 + 9 + 7)) * ((7 * 8 + 2 * 4) * 2 * 9)
7 * 4 + (8 * 3 + (5 + 9 + 8) + 7) * 2 * 2 + (8 + 7)
(8 * 6) + 8 + 7 + 6 + 4
((7 + 3 * 4 + 8) + 8) * 8 + 3 * ((8 + 3 + 4 + 8 * 3 + 3) + 2 + 5 + (5 + 6 + 2 * 2 * 7) * 4) + 9
6 + 7 * (8 * 8 * 9) * 4 * 9 + (2 + 7 * 3)
8 * 2 + 4 * (5 + (8 + 4 + 9) + (6 * 6)) + (8 * 6 * 6 * (2 * 9 * 4 + 3 * 7 * 7) * 6 + 4) + 2
3 + (4 * 3 * 8 * 7 + 7 + 3) * 2 * (4 * 9 + 9) * 5
3 * (5 * 6 + 3 + 9 * 2 + (6 * 6 * 9 * 6 + 2)) + 8 + 9 + ((5 + 6 * 3 + 9 * 9 + 8) + 3 * 9 + (4 + 4 * 7 * 7 + 6) + 3) * 7
9 + 4 + 6 * 6 + (7 + (3 * 5)) * (8 + (3 * 4 * 4 * 4) + 2 * 8 * 7)
3 + 6 * 9 * ((6 * 9 + 5 + 8) * 7 + (4 + 4) * 3 + 4) * (5 + 5)
6 + 9
2 + (3 + 4) * 3 * 7
8 * 8 + (3 + 5 * 9 + 4 * 6 * 8) * 7 + ((5 * 5 + 3) * 9 + 5 * 8 * 5 + 6) + 9
7 + (7 * 5 * (5 * 5 * 7) + 4 * 8 * 6)
6 + 5 * (5 + 4 + (4 * 7)) * 5 * 7
2 + (8 + 4 * 5 + 8) + 5 * 3 + ((5 * 6 + 6) + 3 + 7 + (5 * 4 * 8 + 4 * 9 * 2) + 8 + 9)
(9 * 3 * 9) + (8 * 4) + 9 + 3
6 + 8 + ((9 * 8 + 5 * 8 + 5) + 3 + 5 + 7 * 2 + 5)
6 + 3 + ((3 * 9 * 4 * 4 + 5) * (5 * 6 * 2 * 6 * 7) * 7)
5 * (7 * 8 + 3 * 4 * (7 + 3 + 3) * 7)
4 + (5 * (8 + 5 * 4 + 3) * 7 * 6 + (4 + 9 * 6 + 8 + 8 + 5) * 2) + 2 + 6
(9 + 7 * (8 * 3 * 5 + 6)) + (9 * 3)
5 + (3 * 8 + 2 * (8 * 3 + 3 * 6) * 4 + 2) * 8
6 * (3 + (5 + 8 + 9 + 9 + 3)) + 5 + 4 * 9 * 7
5 + (6 * (5 + 3 + 9 * 8) * 5) * 4 * 7 * 4
2 + 3 + 5 * ((9 + 4 * 3 * 4 + 8 * 2) + (7 * 5)) * (8 + 9 * 3 * 6 * 7)
3 * 4 + (4 * 4) + 5 * 5
2 + 5 + 5 + (2 + 2 * 2 * 2) * 9
9 * 3 * 3 * 5 * 5 + (9 * 6)
4 + 4 + (9 + 7 * (6 + 9 * 3) * 7) + 3 * 3 + (7 + 8 * 7 + 6 + 3)
(8 + (3 + 9)) * 8 + 9 + 6 + ((5 * 8 * 7 + 3 + 2 * 7) + 5 + 9 + 6) * 2
5 + 8 * ((7 * 6 + 9 * 3 + 8 + 8) + 7 + (9 * 7 + 8 * 7 * 5)) + 4 * 2
7 * (4 + 4 * 3 + 6 + (9 * 9 + 7 * 3 + 8 + 5) + 7) + 7 + 6
2 + 2 + 5 + 2 * 3 + 6
2 + 9 * (3 + (8 * 2 * 8 * 8 * 7)) + (2 * 4) * 5
5 + 2 + 7 + 4 + 9 * (7 * 4 + 4 * 5 + 9 + (7 * 2 + 4 + 6))
(6 * 2 + 5 * 4) * 9 * ((3 * 2 + 3 + 9 + 9) * 4)
4 + (8 * 2 * 9 + 6 + 4 + 2) + 5 + 2 + 6
9 * 7 + (4 * (3 * 3 * 4 + 8 + 6) + (2 + 9 * 2) + 6) * ((9 * 5 + 4) + 6 + (3 * 2 * 7) * 6) + 8 * 5
2 * (4 * 5 * 7) + 8 * 4 + 6 * 8
5 * 8 * (5 + 9 * 5 + 4) + 7 + 8 + (3 + 9 * 9)
(8 * 6 * 8 + 3) + 3 + 5
(4 * (3 + 3 * 2 + 6 + 8) * 9 * (9 * 9) * 5) * 8 + 7 * 7 * 2 + 9
4 + ((7 * 9) + 6 + 2 * 2 + 6 * 8) * 4 * 5 + 6 * 4
5 * 7 * (8 * (2 + 2 + 2 + 6) + 2 + 4)
5 * 4 + ((8 + 9 * 5 + 8 + 3) + 8)
2 + 7 + 6 * (3 + (5 + 5 * 3) + 8 * (3 + 2 + 4)) + (4 + 6) * 6
(4 + 5 + 9 * (2 * 2 + 3 + 4 * 9)) * 3 + 4 + 2
3 + 7 * ((7 * 5 + 7 + 9 + 7 + 6) + 4 + 4 * 8 * 3 + (3 + 7 * 4)) + 7 + 2 + 6
3 * (2 * 8 + 2 + 6) * 6 + 4 * 3
5 + ((9 * 6 + 9 * 8 * 4) * 9 * 7) * 5 + 9 + 4 + 9
5 * 3 * 9 * (7 * 3 * (6 * 3) * 4 + 8) + (5 + (3 + 7) + 6) * 7
4 + 7
(4 + 9 + 7 + (5 * 5) + 7) * 9
2 * (8 * 7 + 3 * (9 + 2 * 3 * 2 + 2 * 2) * 2) * 6 + 4 * 8
(8 + (4 + 6 + 9 + 3) + (3 + 7 + 3 + 8) + 8 + 2 * 5) * (6 * (8 * 9 + 3 + 6 + 3 + 5) * 3 * 4)
4 + 2 * (6 * 4 * 2) * 5 + 4
4 * (4 * 7) * 4 + 5 * (6 + 6 * 3 * (8 + 2 + 3 + 7 * 5)) + (2 * 9 * 9 * 9)
3 * 6 * 9 + 6 + 9 * (5 * 5 * 2 + (6 + 9) * (9 * 5 * 7) + 2)
4 + 8 * 8 + ((4 + 5) + 7 * 4 * 3)
7 + 9 * 5 + (6 * 6 + 6) + (8 + 5)
4 * (7 * 6) * 7 * 7 + ((8 * 6 * 8 * 2) * 4 * 9 + 5 + 4) + 6
(7 * 2) + 6 + 5 * (5 * 7 * 6 * 7) * 9
5 * 9 + 8 * (6 * 9 + 4 * 2 + 2 * 6)
4 * 7 * (2 * 8 * (2 * 8 * 2 * 8 + 5 + 8) * 9) * (6 + 9 * (7 + 2 + 3 * 9)) + 8 + (2 + (6 * 2 + 8 + 8) * 4 + 8)
9 * 7 * 2 + 9 + 3 * (9 + 4 + 9)
3 + (5 * 4) * 8 + 9 + (6 + 8 * 8 * 5 + 8 * 7)
(6 + 3 * (5 + 2 + 8 + 5 + 2 * 7)) + 2
7 * ((8 * 5 * 4 * 4 * 6) + 2 + (5 + 8 + 9)) + 5 + 5 * 2
2 * ((6 * 9 * 2 * 7) * 2) * 7 * 6 * 5 * 9
5 + 4 + (6 + 8 + 4) * 9 + 8 * 2
2 * 5 * 3 + 2 * 3 * (2 + 3 * 8 * 6)
5 * (6 * 7 * 2) * (8 + (7 + 9 * 4 * 6 * 5 * 6) + 3 * 6)
6 * (8 + 6 + 2 + (7 + 7 * 5 + 8) + (4 + 5 * 2 + 3 * 4 * 3) + 8) * 5 + 3 + 5
(6 * 7 + (9 * 9 * 5 * 5 + 3) * 2) + 3 * 8 * 3
(2 + 7) * 3 + 7 * 6
(8 + 4 * 3 * (6 * 5 + 8 * 8 + 2 * 6) + 9) * (6 * (2 * 3 + 3 * 6 * 8 * 5) * 2) + 3 + 3 + 7
2 + 8 * (3 + 5 * 6) * 5 * (5 + 5 * (7 * 8) + (7 + 4 + 6)) * (5 * 8 + 3)
(7 + (9 * 3)) + 2 + 7 + ((4 + 4 + 8 + 7 * 6 * 2) * (7 + 3 + 5 * 4 + 2 + 4) + 4) * (4 + 7 + (6 * 4 + 4 * 7)) + ((2 * 2 + 8 * 4 + 6) + 9 * 2 + 7 + (6 + 6 * 9))
6 * ((8 + 7 + 3 * 7 + 5 * 6) + 4 + 5 * (6 * 2 + 6 + 3 + 4) + 3) * 9
2 * 7 + (9 * 3)
5 * (5 + 3 * 4 * 9)
5 + 6 * 7 * 5 * (2 + (3 + 6 * 9) + 8) + 7
((7 + 8) + 3) * 2 * (8 + 8)
2 * 5 * 7 * 2 + 6
(5 * 2 + 4) * 8
7 * 9 * 9 * (8 + 3 + 4 * 2 * (7 * 5 * 4 * 3 + 3) + 3)
7 + 8 * 4 + (3 * 7)
7 * 9 * (2 + 6 * 4 + 5 * 8 + (6 * 4 + 5 * 4 + 7)) * 6
(7 * 8 + 8 + 8 * 8 * 4) * 5 * 2 * 2 + 2
8 + (5 + 2 + 7) + 4 + (3 + 7 + 3 + 2 + 2 + 6)
3 * 3 * 8 * (6 * 7 * (4 * 7 + 7 * 2 * 2 * 6)) * 7
9 + (9 * 5 * (7 + 8 * 2 + 6 + 2 + 7) + 7) + (9 + (5 + 2 * 7) * (4 + 7 + 2 * 5 + 5 + 7))
4 * 7 + 2 + 6
3 * 7 + (9 * 2 * (8 + 2 + 3 + 4 + 9 * 6) + 5 * 2) + 9
(3 * (8 + 6) * 7 + 6 * 7 + 4) + 6 * 6 * 5 * 4 * 6
9 * ((3 * 4 + 7 * 6) + 3 + (2 + 5 * 7 + 3 * 9)) * 8 * 4 * 9 + 4
3 * 3 * 8 * (5 + 7 * (2 + 5 * 2 * 4 * 7 * 5) + 8) + 3
3 * 2 + ((8 * 7) * 4 * 8) * 3 + 6 * 3
(7 + (5 + 4 * 5 + 5) + 5 + 8 + 8) + (6 + 2 + 9) + 2 + 3 * 5 + 7
6 + (7 * (2 + 7 * 2 + 9 * 7) + (5 * 8 + 2)) + 7 * 7 * (9 + 3) * 3
(4 * 3 * (6 + 2 * 5 + 3) + 6 * 5 + 9) * (7 * 2 * 8 + 5) * (8 + 4 * (3 * 4 + 6 + 2 + 7)) + 6 * (6 + 4)
(5 * (9 + 9 * 8 + 2 + 4 + 8) * 4 + 2 * 3) + 5 * 4 * 3 + 3
6 * (3 + 6 * 5 + 4 * 3 * 2) + 9
((6 + 6 * 5 * 5 * 2 + 9) * 5 + 6 + 5) + 5 + (8 * 7) + 5 * 7
7 + (6 + 4 + 3 * 2 + 3 + (3 + 9 + 2 + 3)) + 8 + 7 + 2
7 + 8 * (6 * 2 + 4 * (6 + 9 * 8) * 8) * 9 * 2
9 + (6 + 3 * 5 + (4 + 7 * 6 + 5) * 8) * 2
8 + (7 + (6 + 3 + 3 + 6)) * 9
(9 * 4 + 2 + 3 * (4 * 8 + 6 + 8 * 4)) * 9 + 5 + (3 * 4 * 8 + 6) * 8
5 + 5 + (2 * 6 + 9) + (9 * 8 * 7 + 4) + 5
(7 * 5 * 6 + 2 * 9 * 3) * (6 + 4 * 8) * 6 + 2
6 * (4 + 4) + 9 + (5 * 3) * 4
(9 * 6 + 8 + 3) + 3 * 4 + 8 * (7 + 9 * 9)
2 * (4 * (6 * 4) + (4 * 5 + 8 * 5 + 6 * 4) * 7 + 2 + 3)
(5 + 3 * (2 * 7 * 2 * 8 * 3 + 7) * (9 + 8 * 6 * 4 * 5) * 4) * 7 * 5 * (4 + 3) + 7
3 + 4 * 2 + (2 * 4 + 9 + 5)
((9 * 2 + 7) + 5 + (2 * 9 + 8 + 6) + 8 * 7) * 4 * 5 + (8 * 2 + 9 * 9 + (2 * 5 * 8 + 5 * 5) + 7) + (5 + (8 + 5 * 9 * 7 + 7 * 8) + 6 * 3 * 3)
2 * 6 + 9 + 9 + (2 + 2 + 7 * (5 * 8 * 2 * 3 * 9)) * 2
7 * 4 + 7 + 5
5 + 5 + 3 * 9 + (6 * (6 * 3))
5 + ((3 + 3 + 3 + 3 * 8) * 6 * (8 + 4 + 8 + 3 * 7) + 3 * (4 + 8 + 3 + 6 + 6 + 5) * 4) + 2 * 6
(2 * 6 + 4 + (8 + 3 * 7 * 8 * 7) * 7 + 7) + 3 + 8 * 7 + 4 * (9 * 9 + 7 + 9 * 7)
8 + (9 * 8 + 2) * ((8 * 5 * 8 * 2 * 2 * 6) + 6 * 5) + 3 * 7 * (5 + 2)
5 + ((7 + 6 + 5) + 8 * 9 + 7 * (7 + 8 * 8 + 8 + 3)) + (3 + 6)
5 * 7 + 2 + (5 + 8 + 3 * 2 * 5) * 8 + ((4 + 4) + (9 * 7 * 9 + 4) * 9 + (3 * 9 * 3 + 3 * 9) * 5 * 6)
(9 + 5 + 3) + 8 + 4 * 8 + 3 + 7
6 + 6 * 5 * (9 * 5 + 5)
5 + ((7 * 2) + 9 + 9)
2 + (5 * (6 * 8 * 5 * 6 * 9 + 6) * 4) + 8 * 4 * 8
(3 + 7 + 2 + (2 + 3 * 9 + 5) * 2 + (4 + 4 + 3 * 8 + 7)) * 9 * 8 + 2
9 * 2 * ((5 + 2 * 7) + 9 + 6 + 8) + 5 * 7
9 + 6 * 6 * 8 + 7 * 4
7 * 8 * (2 + 4) * 3
5 + 3 + 6 + ((6 * 2 * 4 + 5 * 6 * 6) * 5) + 5
((8 + 2 * 4) + 8 * (8 + 2 * 6 + 3 * 8 * 6) + 8 + 6 * 9) + 2 + 4
7 + (8 + 8) * 4 + (8 + (9 * 3 * 6 * 5) + 5 + (4 + 2)) * 4
((6 + 9) + 6 + 5) * (7 + (9 * 7 * 6 * 8) + (8 + 7 * 4 * 8 * 5 * 4) * 2 + 5) * 2 + 5
4 + 8 + (8 * 8 + 6 * 3 + 7) * 5
6 + 9
(5 * (4 + 6 * 2)) + (9 + 9 + 6 * 4 + 3) * 4 + 4 + 2
((7 + 3 + 8) * 9) + 9 * 2 * 3 * 8
(7 * (5 * 8 + 6 + 2) + 5 * 6 + (8 + 3)) * 4 * 7 + (2 + 9 + 2)
7 + 5 * ((5 * 4 + 2 + 9) * 9)
(3 + (7 + 7 * 6 * 2 + 9)) + (5 * 6 + 4 * 5 * 7 + 2) * 2 * 3 * 3 + 9
(5 + 7 * 8 + 5 + 4) + 8 * 7
(3 * 2 + 7) + 6 + (4 * 5 * 4 * (3 + 9 * 3)) * (6 + 2 * 9 * (3 + 5 + 7 * 7)) * (7 * 6)
8 * 5 + 2 + (5 * 7 + 2 + 5 * (7 + 7 + 4 * 8 + 3 * 5)) * 8 + (7 + 3)
6 * 2 * 2 + ((7 + 5 + 7 * 7) * 2 + 7 + 2 + 9) * 2 * (5 + (7 + 4) + 3)
7 * 9 + (7 * 6 + (5 * 2) * 3 + 5 * (8 * 9 * 4)) + (6 * 3)
3 * 3 + 4 * 8
((2 + 8 * 6 + 2) * 4) * ((4 + 4 + 5 + 4 * 8) * 5 * 7 * 6) * 2
7 * (4 * 7 + (5 * 5 * 7 + 2 + 4) + 4 * 5 + 4) * (2 + 6 * 2 * 4) * 2 + 5 * 7
4 * 3 * 8 * 3 + 2
(8 * 7 * (3 + 8) + (6 + 4 * 9 + 2 + 9 * 7) * (3 * 9 * 3 + 7 * 7) + 9) + 3
(9 + 2 * (7 * 5 + 9 + 4 * 4 + 2)) + 3 + 2 * 7 * 9
4 + 3 + 5 * (3 + 6 + (2 + 9 * 8 * 8 * 5 + 9) + 2)
4 * (9 * 8 + 2) * 2 + 8 + 5
9 * 7 * 4 * (6 * 2 + 7) * 7 + 7
4 * 9 * 5 + (3 * 2 + 5 + 7) + 8 + 8
4 + 3 * (7 * (3 + 8 * 2 + 8 + 8 + 4) * 2)
(4 * 2) + (2 + 7 + (5 + 2) * 9 * 8 * 7)
(7 + 8) + 3 + 5 + 3 * 5 + 9
(4 * 8 * 2 * 8) + 5 * ((6 + 3 + 2 * 4 + 2) * 2 * 4 + 2) + 9
3 + 3 * ((4 + 6 + 4 + 7) + (9 + 8) * (5 + 9 * 3 + 4 + 7) + 9) * 8 + (8 + 6 * (6 * 6 * 5) + 8 + 5) * (8 + 7)
8 * (5 + (4 + 8 * 5 + 8 + 9 * 7) * 2) + 6 * 5 + 4 * (5 * 9 * 2 * 5 * (2 + 3 * 8 * 7) * (4 * 2))
4 + (9 * (8 * 8 + 3 * 3 * 5) + 5 + 3 + (4 * 8)) * 2 + (3 * 4 * 9 + 7) + 8 * 9
2 + 2 * 7 * (9 + (4 * 9 * 4 * 8 + 3 * 9) + 4) + 3 + 9
2 * 3 * 2 * 7 * (5 + (7 + 8 * 2) + (5 * 7 * 8 * 2 + 8) + (2 * 4 + 9) + 2 + 8)
4 * (8 + 6 * 3) * 8
((6 * 9) * (9 * 7 + 3) * 5 + 7) + 8 * 8 * 8 * (5 + 7 * (2 + 9))
6 + 9 * ((8 * 8 + 9 + 9) * 3 * 4) * 3
(7 + 6 + 7 + (4 + 7 * 7 * 6) + (4 + 8) + (9 + 7 * 7 * 9 * 8)) * 5 * 7 + 6 + (3 + (9 + 5 * 2) * 6 + 6)
6 + (8 * 7 + 4 * 2 * 8) + 9 + 7 * 6
5 * 5 * 5 + 9 * 4 * 2
4 + 9 * 9 + ((5 + 3 + 2 * 4) * 6)
2 + (6 * 4 * 5 * 4 * 2 + 6) * (5 * 8)
6 * (7 * 4 + 2 * (3 + 9 * 2 + 6 + 9) + 8 * 7) + (2 * 7) + 2 * 6
(2 + 9) + 8 + (7 * 9 + 7) * 7 * (3 + (2 * 9 * 4 * 5) * 5)
3 * 4 * 5 * (9 + 9 * 6 + 4 + 4 * (8 * 7 + 6)) + 9 * 7
(7 * (9 + 8 * 9 + 5) + 9 + (8 + 4) + 5) + 7 + 6 + 2
9 + 2 + (5 * 5 + 7)
(6 * 5 + (8 * 8 * 9 + 3 * 9)) + 2
(4 + 2 * 7 * 2 * 7) * (6 + 2 + 4) + 6
3 * 6 + 8 + (4 + (4 * 2 + 8) * (9 + 4 + 2)) * 2 + (6 + (9 * 4 + 3 * 6 * 6 * 2) * 9 + 6 + 8 * 7)
(5 + (6 * 2 + 4) + 8 * 8) + 4 * (3 * 8 + 9 + 5 * 8 + 9) + 5
6 + 7 + (4 + 5 * 3 + (4 * 7 * 2 + 4 * 3) + 3)
3 + 8 * (6 + 6 + 9 * (7 * 7 * 2 * 6 + 9)) + 7 * 9
7 * 5 * 9 * 9 + (2 * 8 * 9 + 4 + (9 + 3 * 5 + 4 + 6 + 8) * 2) + 6
((5 * 4 + 4 * 2 + 4) + 3 * 6 + 6) + ((9 + 4 * 4 * 9) * 3 * 4)
5 * 6 + 9 * 9 * 5
4 + (7 + 8 + 6 * 2 + 6) + 6 + 2 * 9 * 9
(5 + (6 * 7 * 8 * 9) + 7 + 9 + 9) * (7 + 9 + 7 * 3 + 4) + 8 * 5 + (3 + (4 * 8) * 4 * 7)
3 + (7 * 8 * 5 * 6 * (3 + 8) * 3) * 4
8 + (5 + 5 * (9 * 5 * 3) * 7 + 8) + 6 * 2
9 + (9 + 2 + (5 + 2 * 3 * 6 + 4) + 7 * 8) * (5 * 4 + (9 + 5 + 2 + 3 + 2 + 2) * 7 * (5 * 9 * 6 * 3) + 3) + 5
(7 * 6 * 7 + 8) + (5 + 8 + 2) * 9
3 + 7 * 2 * (8 * (8 + 4 * 6 * 9) * 3 * 9) * (6 + (5 * 8) * 5 * 3 + 4) + 3
8 * 3 * (7 * 5 + (8 * 7 * 9 * 4 * 3) * 3 + 2) * 8
5 * 5 * (9 * (9 * 7)) + 2
(6 * 7 + 6 * 6 * 5) + 7
7 + 8 * 3 + ((2 * 2 + 9 * 3 * 7 + 2) + 4 * 8 + (7 * 8 + 4)) + 5
7 * 2 * ((6 * 8 * 6 + 4 * 5 * 2) * 2 + (5 * 2 * 2 + 2 * 5 * 5) + 5)
9 + 4 + 7 * (6 + 4) * 4
((8 + 2 * 4 * 6) + 4 + 5 + 9) + (8 + 4 * 7 + 6)
((8 + 9 * 4 * 2 * 8 + 9) + (2 * 7 * 2 + 8 + 7) * 9 + 6 + (4 * 3 * 2 + 4 * 9) * 7) * 8 + 4 + 4
4 + (8 * 2 + 9 + 5) * 6 * 5
7 + 7 + (9 * (5 + 3 * 2 * 9 * 9 * 7) + 4 * 4 * 2) * (9 * 8)
(2 * 5 + 4 + 9 * 5 + 3) + 6 * 6 + 6 + 4 * (4 * 8)
(4 + (9 + 2) * (4 + 3 + 7 * 6 * 9) + 7) + 2 + 6 * 3 + 4 + 5
9 + 6 * (8 * (7 * 4 * 7 + 5 * 9 * 2))
(2 + 5 + 9 + (9 + 2)) + 5 + 6
3 + 5 + 5 + 2 + 9 * ((7 + 6) * 2)
(5 + 2 * 6 * 6 * 5 * 3) * 9 + 7 + (6 + 6 * 4 + 8 + 4 * 4) + 2 * 2
(8 + (7 * 2 * 2 * 3 + 6 * 6)) * 7 * 8
8 + ((8 * 9 * 8 * 5 + 7 + 5) * 5 + 7 * (8 * 7) * 8) + ((3 * 7 * 8 + 9 + 4) + 6 * 7 * 2 + 8 * (7 + 2)) + 7
(8 + 9 * 4 * 6 * 6 * 7) + 7 * 3 * 7 + (7 + 5) + 8
7 * 7 + (6 * 6 + (7 * 4 + 9) + (2 * 4 + 7)) + 8
(8 + (8 + 9 * 2 * 6) + 5) * 2 + 8
8 + 2 + 5 * 7
(9 + (4 + 8 + 3 + 6 * 3)) * 7 + ((4 * 8 + 3 * 7 * 5 * 9) + 4) * ((5 * 9 * 5 + 6) * (6 + 2 + 8) * (7 * 8 * 8) + 9 * 7 + 9) + 2
5 + 7 * 7 * 3 + (5 * 2)
9 + 8 + 9 + (7 + (9 * 6 * 5 * 4 * 7 + 5) + 7 + 7 + 9 + (6 * 3 * 2 + 3 + 9))
(6 * (9 * 3 * 6)) + 3 * 9 * 8 + (3 + (6 * 6 * 5 * 8 + 9) + 7 * 5)
2 + 9 + ((4 + 4 * 9 * 6) * (8 + 6 + 6 + 2)) * 2 + 4
3 + 5 + ((4 + 9) * 7 * 6)
7 * 2 * 7 * 9 * (7 * (7 * 6 + 2) * (6 + 8 + 9 + 9) + (3 + 7 + 5 * 2) + 2) * (9 * (8 + 9 + 8 + 6 * 2 + 2) + 5 * (3 + 8 + 7 * 4))
4 + (3 * 2 + (5 * 4 + 9 * 4 * 8) * (5 * 3 + 6)) * 6 + 7 + 8 * 3
2 + 5 * (7 * 3 * 6 * 4 * 8 + 9)
7 + ((2 + 4 + 4 + 6) + 6 + 8) * 6 + 6 + 5
9 * 4 + 4
(3 + 3 * 3 * 8 * 6 * 4) + 6 + 3
5 + 8 + 7
4 * (4 + (9 + 5) * 5 * 7 * 3 * 2) * 8 * 7
5 * ((5 * 7 * 5 + 9 + 9 + 2) + 6 * 7 * 9)
6 * 5 + 9 + 8 + 3 * 5
9 + 4
4 + 5 + 7 + 4 * 8 * (8 * 3 * 6 * 6 + (3 + 4 + 4 * 3 + 7) * 2)
4 + 7 * (9 * 8 + 2) + (3 + 7)
(3 * 4 + 5 + 5 * 3) + 9 * 3 + 2 + 4
(3 * 3 * 4 + 6) + 2 * 4 * 2 * 2
(7 * 7 + 9 * 3 + 9) + 2 * 6 * 7
9 + 6 + 6 + 7 + 2 + ((9 + 3 * 3 * 6 + 2) * (4 + 5) + 8 + 3 + 3 * 9)
8 * (2 * (9 * 2 * 9 + 4 + 3) * (5 * 3 + 3 + 9) + 6 * 3) + 3
8 * 2 + 8 * ((4 * 5) * 8 * 5 * 5 * (3 + 4 + 7 * 9 + 5 + 4) + 2) * 8
(9 * 3 + 4 + (2 * 6 + 3 * 9 * 9 + 6)) * 3 + 8
3 + (7 * 5 * 4)
((3 + 2 * 3 * 3 * 9) + 4 * 4) * 3
5 * (9 * 7 * 8) + (8 * 9 * 8)
((6 * 2 * 3) * 6 * 3 + 9) * 8 + 3 * 7 * 5 * 2"